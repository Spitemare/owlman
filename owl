#! /bin/dash

XDG_AUR_HOME=${XDG_AUR_HOME:-~/src/aur}
BROWSER=${BROWSER:-curl}
OWL_MAX_URL=${OWL_MAX_URL:-21}

if [ $# -lt 1 ]; then
    cat <<- END
usage: $(basename "$0") <action> [arguments]
where <action> is one of:
    update -- update the system
    add pkg1 [pkg2 ...] -- install the packages
    remove pkg1 [pkg2 ...] -- remove the packages
    download pkg1 [pkg2 ...] -- download the packages from the aur
    info pkg1 [pkg2 ...] -- retreive informations on the packages
    page pkg -- opens the package's aur page
    home pkg1 [pkg2 ...] -- opens the packages home pages
    find string -- search for the given package in the official repos and fallback to aur
    search string -- search for the given package in both the official repos and the aur
    query string -- search locally for packages matching string
    list pkg1 [pkg2 ...] -- list the files belonging to the packages
    bin pkg1 [pkg2 ...] -- filter binaries form the 'list' action
    etc pkg1 [pkg2 ...] -- filter config files from the 'list' action 
    man pkg1 [pkg2 ...] -- filter manuals from the 'list' action
    grep pkg string -- search for 'string' in all the files belonging to 'pkg'
    owner file -- return the name of the package owning the given file
    leftovers -- search and propose merges for pac{new,orig,save} files
    foreigns -- show manually installed packages
    orphans -- show packages not listed as a dependency by any package
END
exit 1
fi

action=$1
shift
tmp_out=/tmp/owl.$$

getinfos() {
    while [ $# -gt 0 ]; do
        pacman -Si "$1" > "$tmp_out" 2>&1
        if [ $? -ne 0 ]; then
            cower -i "$1" > "$tmp_out" 2>&1
            if [ $? -ne 0 ]; then
                echo "package '$1' was not found" >&2
                exit 1
            fi
        fi
        cat "$tmp_out"
        echo -n > "$tmp_out"
        shift
    done
}

case $action in
    i|info)
        getinfos "$@"
        ;;
    u|U|update)
        sudo pacman -Syu
        [ "$action" = "U" ] && cower -u
        ;;
    l|L|list)
        pattern='.'
        if [ "$action" = "L" ]; then
            pattern=$1
            shift
        fi
        pacman -Qlq "$@" | grep -i "$pattern"
        ;;
    q|query)
        pacman -Qsq "$@"
        ;;
    f|find)
        pacman -Ssq "$@"
        if [ $? -ne 0 ]; then
            cower -sq "$@"
        fi
        ;;
    s|search)
        pacman -Ssq "$@"
        cower -sq "$@"
        ;;
    o|owner)
        pacman -Qo "$@"
        ;;
    g|grep)
        pkg_name=$1
        pkg_files=$(pacman -Qlq "$pkg_name")
        if [ $? -eq 0 ]; then
            shift
            [ ! "$@" = "\n" ] && grep -i "$@" $pkg_files
        fi
        ;;
    d|download)
        cd "$XDG_AUR_HOME"
        if [ "$action" = "download" ]; then
            cower -ddf "$@"
        else
            cower -df "$@"
        fi
        ;;
    r|R|remove)
        if [ "$action" = "R" ]; then
            sudo pacman -Rs "$@"
        else
            sudo pacman -R "$@"
        fi
        ;;
    a|add)
        while [ $# -gt 0 ]; do
            pacman -Si "$1" > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                sudo pacman -S "$1"
                [ $? -ne 0 ] && exit 1
            else
                cd "$XDG_AUR_HOME"
                cower -ddf "$1" > "$tmp_out" 2> /dev/null
                if [ -s "$tmp_out" ]; then
                    list_of_programs=$(cat "$tmp_out" | tac | sed 's/.* \([^ ]\+\) downloaded.*/\1/') 
                    for i in $list_of_programs; do
                        cd "$XDG_AUR_HOME/$i"
                        makepkg -ifs
                        [ $? -ne 0 ] && exit 1
                    done
                    echo -n > "$tmp_out"
                else
                    echo "package '$1' was not found" >&2
                fi
            fi
            shift
        done
        ;;
    leftovers)
        log_lo=$(grep -Eo '/[[:graph:]]+\.pac(new|orig|save)' /var/log/pacman.log | sort -u)
        for i in $log_lo
        do
            if [ -e "$i" ]; then
                echo "merge '$i' [y/N]?"
                read perform_merge
                case "$perform_merge" in
                    y|yes|Y|Yes)
                        sudo vimdiff "${i%.*}" "$i"
                        ;;
                    *)
                        ;;
                esac
            fi
        done
        ;;
    p|page)
            uri=$(getinfos "$1" | grep -m 1 -o 'https://aur.*')
            if [ -n "$uri" ]; then
                $BROWSER $uri
            fi
        ;;
    h|H|home)
        if [ $action = "H" ]; then
            pkg_list=$(pacman -Ssq "$@"; cower -sq "$@") 
            if [ -n "$pkg_list" ]; then
                set $pkg_list
            fi
        fi
        counter=0
        while [ $# -gt 0 ]; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https\?://.*')
            if [ -n "$uri" ]; then
                $BROWSER $uri
                counter=$((counter+1))
            fi
            shift
            if [ $((counter % OWL_MAX_URL)) -eq 0 -a $counter -gt 0 -a $# -gt 0 ]; then
                echo -n "continue [Y/n] ($# remaining)?"
                read answer
                [ -z "$answer" ] && answer='y'

                case "$answer" in
                    y|Y|yes|Yes)
                        :
                        ;;
                    n|N|no|No)
                        exit 0
                        ;;
                    *)
                        echo "see you soon" >&2
                        exit 1
                        ;;
                esac
            fi
        done
        ;;
    b|bin)
        pacman -Qlq "$@" | grep '/s\?bin/.'
        ;;
    e|etc)
        pacman -Qlq "$@" | grep '/etc/.'
        ;;
    m|man)
        pacman -Qlq "$@" | grep '/man./.'
        ;;
    foreigns)
        pacman -Qmq
        ;;
    orphans)
        pacman -Qdtq
        ;;
    *)
        echo "action '$action' is unknown" >&2
        exit 1
        ;;
esac
