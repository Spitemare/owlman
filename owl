#! /bin/dash

XDG_AUR_HOME=${XDG_AUR_HOME:-~/src/aur}
BROWSER=${BROWSER:-web_browser}
OWL_MAX_URL=${OWL_MAX_URL:-16}
OWL_SUDO_WARN=${OWL_SUDO_WARN:-true}

usage() {
    printf "usage: $(basename "$0") <action> [...]\n"
    exit 1
}

white() {
    printf "\033[1;37m%s\033[0m" "$@"
}

green() {
    printf "\033[1;32m%s\033[0m" "$@"
}

magenta() {
    printf "\033[1;35m%s\033[0m" "$@"
}

warning() {
    if [ -t 1 ] ; then
        printf "$(magenta '==>') $(white "$@")"
    else
        printf "==> $@"
    fi
}

sudorun() {
    if [ "$OWL_SUDO_WARN" = "true" ] ; then
        warning "Running sudo\n"
    fi
    sudo $@
}

if [ $# -lt 1 ]; then
    usage
fi

action=$1
shift
tmp_out=/tmp/owl.$$

getinfos() {
    while [ $# -gt 0 ]; do
        pacman -Si "$1" > "$tmp_out" 2>&1
        if [ $? -ne 0 ]; then
            cower -i "$1" > "$tmp_out" 2>&1
            if [ $? -ne 0 ]; then
                echo "package '$1' was not found" >&2
                exit 1
            fi
        fi
        cat "$tmp_out"
        : > "$tmp_out"
        shift
    done
}

case $action in
    u|U|update)
        if [ "$action" = "U" ]; then
            cower -u | tee "$tmp_out"
            if [ -s "$tmp_out" ] ; then
                    printf "reinstall packages? [Y/n] "
                    read answer
                    [ -z "$answer" ] && answer='yes'
                    case $answer in 
                        y|Y|yes|Yes)
                            owl install $(cat "$tmp_out" | sed 's/^:: *\([^ ]\+\) .*$/\1/' | xargs)
                            ;;
                    esac
            fi
        else
            sudorun pacman -Syu
        fi
        ;;
    c|checkout)
        repos=$(find "$XDG_AUR_HOME" -maxdepth 4 -type d -regex '.*/\(\.git\|\.hg\|\.bzr\|\.svn\|_darcs\|CVS\)$' | grep -v '\-build/')
        for rp in $repos ; do
            path=${rp%/*}
            format=$(printf "%s" "$rp" | sed 's:^.*[^A-Za-z]\([A-Za-z]\+\)$:\1:')
            relat=${path#"$XDG_AUR_HOME/"}
            name=${relat%%/*}
            pacman -Q "$name" > /dev/null 2>&1
            if [ $? -eq 1 ] ; then
                if [ -t 1 ] ; then
                    magenta "==> "
                    white "$name "
                else
                    printf "%s" "==> $name "
                fi
                printf "%s\n" "is not installed"
                printf "%s" "remove it from the cache [y/N]? "
                read answer
                case "$answer" in
                    y|Y|yes|Yes)
                        rm -vrf "$XDG_AUR_HOME/$name"
                        ;;
                esac
                continue
            fi
            if [ -t 1 ] ; then
                green "$name"
                printf "\n"
            else
                printf "%s\n" "$name"
            fi
            no_changes=0
            cd "$path"
            case "$format" in
                git)
                    git pull | tee "$tmp_out"
                    grep -iq '^already up-to-date' "$tmp_out" && no_changes=1
                    ;;
                hg)
                    hg pull -u | tee "$tmp_out"
                    grep -iq '^no changes found' "$tmp_out" && no_changes=1
                    ;;
                bzr)
                    bzr update > "$tmp_out" 2>&1
                    grep -iq '^tree is up to date' "$tmp_out" && no_changes=1
                    ;;
                svn)
                    svn update | tee "$tmp_out"
                    grep -iq '^at revision' "$tmp_out" && no_changes=1
                    ;;
                darcs)
                    darcs pull | tee "$tmp_out"
                    grep -iq '^no remote changes to pull' "$tmp_out" && no_changes=1
                    ;;
                CVS)
                    cvs update > "$tmp_out" 2>&1
                    cat "$tmp_out"
                    grep -iqv '^cvs update:' "$tmp_out" || no_changes=1
                    ;;
            esac
            if [ $no_changes -eq 0 ] ; then
                echo -n "reinstall package '$name' [Y/n]? "
                read answer
                [ -z "$answer" ] && answer="yes"
                case "$answer" in
                    y|yes|Y|Yes)
                        cd "$XDG_AUR_HOME/$name"
                        makepkg -fi
                        ;;
                esac
            fi
        done
        ;;
    v|view)
        getinfos "$@"
        ;;
    l|L|list)
        pattern='.'
        if [ "$action" = "L" ]; then
            pattern=$1
            shift
        fi
        pacman -Qlq "$@" | grep -i "$pattern"
        ;;
    q|Q|query)
        if [ "$action" = "Q" ]; then
            pacman -Qsq "$@"
        else
            pacman -Qs "$@" | owl_color_filter
        fi
        ;;
    f|F|find)
        if [ "$action" = "F" ] ; then
            pacman -Ssq "$@"
        else
            pacman -Ss "$@" | owl_color_filter
        fi
        ;;
    s|S|search)
        if [ "$action" = "S" ] ; then
            pacman -Ssq "$@"
            cower -sq "$@"
        else
            pacman -Ss "$@" | owl_color_filter
            cower -s "$@" | owl_color_filter
        fi
        ;;
    o|owner)
        pacman -Qo "$@"
        ;;
    g|grep)
        pattern=$1
        shift
        pkg_files=$(pacman -Qlq "$@")
        if [ $? -eq 0 ]; then
            [ ! "$pattern" = "\n" ] && grep -Ii "$pattern" $pkg_files
        fi
        ;;
    d|D|download)
        cd "$XDG_AUR_HOME"
        if [ "$action" = "D" ]; then
            cower -ddf "$@"
        else
            cower -df "$@"
        fi
        ;;
    r|R|RR|remove)
        if [ "$action" = "RR" ]; then
            sudorun pacman -Rc "$@"
        elif [ "$action" = "R" ]; then
            sudorun pacman -Rs "$@"
        else
            sudorun pacman -R "$@"
        fi
        ;;
    i|install)
        while [ $# -gt 0 ]; do
            pacman -Si "$1" > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                sudorun pacman -S "$1"
                [ $? -ne 0 ] && exit 1
            else
                cd "$XDG_AUR_HOME"
                cower -ddf "$1" > "$tmp_out" 2> /dev/null

                if [ -s "$tmp_out" ]; then
                    list_of_programs=$(cat "$tmp_out" | tac | sed 's/.* \([^ ]\+\) downloaded.*/\1/') 
                    for i in $list_of_programs; do
                        cd "$XDG_AUR_HOME/$i"
                        makepkg -ifs
                        [ $? -ne 0 ] && exit 1
                    done
                    : > "$tmp_out"
                else
                    echo "package '$1' was not found" >&2
                fi
            fi
            shift
        done
        ;;
    leftovers)
        log_lo=$(grep -Eo '/[[:graph:]]+\.pac(new|orig|save)' /var/log/pacman.log | sort -u)
        for i in $log_lo
        do
            if [ -e "$i" ]; then
                echo -n "merge '$i' [y/N]? "
                read answer
                case "$answer" in
                    y|yes|Y|Yes)
                        vimdiff "${i%.*}" "$i"
                        ;;
                esac
                echo -n "remove '$i' [y/N]? "
                read answer
                case "$answer" in
                    y|yes|Y|Yes)
                        sudorun rm "$i"
                        ;;
                esac
            fi
        done
        ;;
    p|page)
        while [ $# -gt 0 ]; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https://aur.*') > /dev/null 2>&1
            if [ -n "$uri" ]; then
                $BROWSER $uri > /dev/null 2>&1
            else
                echo "package '$1' is not in AUR" >&2
            fi
            shift
        done
        ;;
    h|H|home)
        if [ $action = "H" ]; then
            pkg_list=$(pacman -Ssq "$@"; cower -sq "$@") 
            if [ -n "$pkg_list" ]; then
                set $pkg_list
            fi
        fi
        counter=0
        while [ $# -gt 0 ]; do
            uri=$(getinfos "$1" | grep -m 1 -o 'https\?://.*')
            if [ -n "$uri" ]; then
                echo "$1: $uri"
                $BROWSER $uri > /dev/null 2>&1
                counter=$((counter+1))
            fi
            shift
            if [ $((counter % OWL_MAX_URL)) -eq 0 -a $counter -gt 0 -a $# -gt 0 ]; then
                echo -n "continue [Y/n] ($# remaining)? "
                read answer
                [ -z "$answer" ] && answer='y'

                case "$answer" in
                    y|Y|yes|Yes)
                        :
                        ;;
                    *)
                        exit 0
                        ;;
                esac
            fi
        done
        ;;
    b|bin)
        pacman -Qlq "$@" | grep '/s\?bin/.'
        ;;
    e|etc)
        pacman -Qlq "$@" | grep '/etc/.'
        ;;
    m|man)
        pacman -Qlq "$@" | grep '/man./.'
        ;;
    cleanup)
        if [ ! -d "$XDG_AUR_HOME" ] ; then
            prinft "%s\n" "the cache directory is invalid" >&2
            exit 1
        fi
        cd "$XDG_AUR_HOME"
        for i in * ; do
            if [ -d "$i" ] ; then
                pacman -Q "$i" > /dev/null 2>&1
                [ $? -eq 1 ] && rm -vrf -- "$i"
            fi
        done
        ;;
    foreigns)
        pacman -Qm
        ;;
    orphans)
        pacman -Qdt
        ;;
    *)
        echo "action '$action' is unknown" >&2
        exit 1
        ;;
esac
